public class IA{
	java.util.ArrayList<esame.ia.pileofballs.Lista> risultato;
	java.util.ArrayList<esame.ia.pileofballs.Lista> vuoto;
	int num;
	public IA(){}
	
	public java.util.ArrayList<esame.ia.pileofballs.Lista> scegliPosizione(java.util.ArrayList<esami.ia.pileofballs.Lista> occupati, java.util.ArrayList<esami.ia.pileofballs.Lista> tripla, java.util.ArrayList<esami.ia.pileofballs.Lista> triplasucc, java.util.ArrayList<esami.ia.pileofballs.Pair> costo){
		this.risultato = new java.util.ArrayList<esame.ia.pileofballs.Lista>();
		this.vuoto = new java.util.ArrayList<esame.ia.pileofballs.Lista>();
		
		<#
			IN=occupati::occ,tripla::el,triplasucc::elsucc,costo::costop;
			OUT=risultato::scelta;
			pari(0).
			pari(2).
			pari(4).
			pari(6).
			pari(8).
			pari(10).
			dispari(1).
			dispari(3).
			dispari(5).
			dispari(7).
			dispari(9).
			dispari(11).
			
			//scegliamo la pallina su cui far cadere la tripla
			scelta(ID,I,J,COL) v noscelta(ID,I,J,COL) :- occ(ID,I,J,COL).
			
			//prende i colori delle palline della tripla
			coloritripla(COL) :- el(_,_,_,COL).
			
			//scarta gli answerset con più palline scelte e nessuna
			:- not #count{ID:scelta(ID,_,_,_)} = 1.
			
			//scarta gli answerset con la pallina scelta di colore diverso alle palline nella tripla
			:- scelta(_,_,_,COL), not coloritripla(COL).
			
			//trova le posizioni occupate attaccate alla pallina scelta
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), I1=I2, J2=J1+1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), I1=I2, J2=J1-1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), J1=J2, I2=I1-1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), J1=J2, I2=I1+1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), dispari(I1), I2=I1-1, J2=J1-1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), dispari(I1), I2=I1+1, J2=J1-1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), pari(I1), I2=I1+1, J2=J1+1, ID<>V.
			vicini(ID,V,COL) :- scelta(ID,I1,J1,_), occ(V,I2,J2,COL), pari(I1), I2=I1-1, J2=J1+1, ID<>V.
			
			//trova le palline vicine con colore diverso dalla pallina scelta
			vicinidiversi(ID,V) :- scelta(ID,_,_,COL1), vicini(ID,V,COL2), COL1<>COL2.
			
			//calcolo il numero massimo di vicini che può avere quella pallina
			maxvicini(ID,M) :- scelta(ID,I,J,_), I=11, J>0, J<9, M=4.
			maxvicini(ID,M) :- scelta(ID,I,J,_), dispari(I), J=0, M=3.
			maxvicini(ID,M) :- scelta(ID,I,J,_), dispari(I), J>7, M=3.
			maxvicini(ID,M) :- scelta(ID,I,J,_), pari(I), J=0, M=5.
			maxvicini(ID,M) :- scelta(ID,I,J,_), pari(I), J>7, M=5.
			maxvicini(ID,M) :- scelta(ID,I,J,_), I=11, J=0, M=2.
			maxvicini(ID,M) :- scelta(ID,I,J,_), I=11, J=9, M=2.
			maxvicini(ID,M) :- scelta(ID,I,J,_), I<11, J>0, J<8, M=6.
			
			//prendo gli elementi della tripla con colore diverso dalla scelta
			eldiversi(ID, COL2) :- scelta(_,_,_,COL1), el(ID,_,_,COL2), COL1<>COL2.
			
			//tolgo tutte le scelte completamente coperte
			:- #count{V:vicini(_,V,_)} = M, maxvicini(_,M).
			
			//minimizziamo il numero di palline diverse attaccate
			:~ vicinidiversi(ID,V). [1:1]
			
			//minimizziamo il numero di posizioni occupate intorno la pallina
			:~ vicini(ID,V,COL). [1:1]
			
			//minimizziamo il numero di palline nella tripla diverse dalla scelta
			:~ eldiversi(ID,COL). [1:2]
			
			//minimizziamo il numero di vicini diversi dalla tripla
			:~ eldiversi(ID,COL1), vicini(_,V,COL2), vicinidiversi(_,V), COL1<>COL2. [1:2]
			
			//minimizziamo il numero di palline uguali alla tripla successiva
			:~ el(ID1,_,_,COL1), elsucc(ID2,_,_,COL2), COL1<>COL2. [1:2]
			
			//minimizziamo le triple nella matrice
			:~ costop(ID, C), scelta(ID,_,_,_). [C:3]
			
		#>
		for_each_answerset{return risultato;}
		if(!risultato.isEmpty()){
				System.out.println("Trovato");
				return risultato;
		}	
		else 
			return  vuoto ;
	} 
}